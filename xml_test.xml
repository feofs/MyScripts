<!--
https://www.ibm.com/developerworks/ru/library/x-newxml/
https://ru.wikipedia.org/wiki/DTD
http://dmitriydenisov.com/razmetka-xml-dokumenta/
http://www.script-coding.com/XML.html
http://www.sql.ru/articles/mssql/03102702xmlin20minutes.shtml
https://ru.wikipedia.org/wiki/XML#.D0.9A.D0.BE.D0.BC.D0.BC.D0.B5.D0.BD.D1.82.D0.B0.D1.80.D0.B8.D0.B9

XML представляет собой иерархический документ, а также в своих элементах может представлять любой тип документов, не только текстовый, например музыка, видео
- представляет информацию в структурированном иерахически виде
- сортировка и поиск информации

Документ может быть верно сформированным или валидным
Верно-сформированный
1)Элементы содержат начальный и конечный теги
2) Любой элемент должен быть полностью определен внутри элемента, куда он входит
3) Документ должен иметь один элемент верхнего уровня
4) имена элементов чувствительны к регистрам
 Есть три метода как браузер может отобразить XML документ
1) Отобразить как СSS или расширяемая таблица в формате языка стлейвых таблиц (XSL)
2) Связывание данных, когда к тегам HTML привязываем информацию из тегов XML
Простейший состоит из 2-х частей
1) Обявление типа
<? xml version="1.0" encoding="windows-1251" ?>
2) Хотя бы один корневой элемент

Можно вывести с помощью CSS для этого в конце пролога нужно указать файл в котором описанны таблица css которая описывает как выводить каждый элемент
<?xml-stylesheet type="text/css" href="Sample.css"?>
В котором описанно
<PRODUCTS>
     <PRODUCT>
          <TITLE> Product #1 </TITLE>
          <PRICE> 10.00 </PRICE>
     </PRODUCT>
     <PRODUCT>
          <TITLE> Product #2 </TITLE>
          <PRICE> 20.00 </PRICE>
     </PRODUCT>
</PRODUCTS>
PRODUCT {display:block;}
TITLE {font-style:italic;}
PRICE {font-weight:bold;}

Инструкции по обработке
Можно поместить инструкции для передачи любому приложению например скрипту с данными data='string'
<?Myscript.php data="string"?>
Строку можно вставить


Символьные данные
Если нужно поместить кучу всяких символов < & и т.д то нужно их заменять символьными обозначениями &lt &gt &amp
но сожно сделав заключив это в CDATA
<element><![CDATA[текст <& >!kjdfk текст]]></element>

#Чтобы быть валидным документ должен быть well-formed + к этому содержать пролог DTD - описание документа, т.е какие типы разрешенно использовать в элеметах и аттрибутах а какие нет
большинство просто содержат стандратный DTD, который пользователи включают в свои документы
Он сожет содержать
1) определения типа елементов в документе и порядок их следования
2) Обявление аттрибутов элементов с тпами данных которые могут быть использованных для этих аттрибутов и их значениями по умолчанию
3) Объвление примитиов (переменных) для часто встречающихся данных для встраивания в доку
4) Объявление нотации, которые описывают форматы данных или определнную прогу  для обработки определенного формата
5) Инструкции по обработке


#Определение типа например <IMAGE> должен быть пустым а <PRODUCT> имеет внутри себя любые дочерние элементы
<!ELEMENT ИМЯ Описание>
 Также если писать имена через , то значит 1-й основной а внем должны быть дочерний 2-й,3-й дочерний второму это типа строгой типизаицц
    <!DOCTYPE PRODUCTS
    [
    <!ELEMENT PRODUCT ANY>
    <!ELEMENT IMAGE EMPTY>
    ]

    что вот должен быть TITLE а ему дочерний PRICE а PRICE дочерний MASS

    <!ELEMENT TITLE,PRICE,MASS>
    А ниже выборочная когда должен иметь или title или MASS
    <!ELEMENT TITLE|PRICE|MASS>
    Есть также повторения как в ПХП
    <!ELEMENT TITLE|PRICE|MASS>

?	  Ни одного или один из предшествующих элементов.
+	  Один или несколько из предшествующих элементов.
*	  Ни одного или несколько из предшествующих элементов
    Например
    <!ELEMENT (TITLE+,PRICE?,MASS)> - сначала должен идти как минимум один или несколько элементов потом дочерний PRICE 0 или более раз, т.е является необязательным
    <!ELEMENT TITLE (#PCDATA)>  - только символьные данные
    <!ELEMENT TITLE (#PCDATA|TITLE*)> - символьные данные а затем ни одного или несколько TITLE

Определние типа аттрибутов
    <!ATTLIST ИмяЭлемента имя атрибута тип атрибута значение по умолчанию>
    Например
    <!ATTLIST PRODUCT retail CDATA "intel.com" TITLE CDATA #REQUIRED> - это значит, что мы можем присвоить retail любую строку в кавычках,но не обязательно а вот TITLE также можем любуб строку в кавычках, но #REQUIRED - значит обязательно должен быть
    #Кароч есть тпа несколько способов задания типа аттрибута строковый, маркерный и нумерованный тип
    Типы для маркерных
    ID - для каждого элемента этот аттрибут должен иметь уникальное значение, причем атриб с таким типом может быть один у элемента
    IDREF- значение этого является ссылкой на аттрибут ID другого документа
    ENTITY - значение аттрибута должно совпадать с именем каого либо примитива объевленого в DTD, а в этом примитиве может содержаться ссылка на файл например рисунок
    ENTITIES - ссылки на несколько идентификаторов разделенных пробелами
    NMTOKENS - строка символов разрешенных в использовании в XML
    Для нумерованного типа
    NOTATION - это для нумерованного типа, можно определить , т.е указать какую либо нотацию, она описівает формат данніх или какую-то прогу для определния типа данных
    <!ATTLIST PRODUCT Description NOTATION (HTML | SGML | RTF) #REQUIRED>
    Также можем задавать свойства нашим аттрибутам т.е обязательно или нет их использовать
    #REQUIRED - обязательно
    #IMPLIED - значение указывать не обязательно
    #FIXED value - можно в документе не объявлять атрибут но ему все равно назначиться это значение по умолчанию, если же объявим то просто обязанны использовать это значение по умолчанию
    value - без решетки просто значение по умолчанию

   Можно все єто говно описать в файле а затем подключать его так
   <!DOCTYPE PRODUCTS SYSTEM "Products.dtd"
    [
    ...
    ]
    Т.к HTML как и XML явлвется тоже подмножетсвом языка SGML то для него тоже есть тпа таких шаблонов например что должно стоять в теге <h1> а что в <img> этот документ выложен на http://www.w3.org/TR/html4/strict.dtd"
    и в HTML мы можем в DOCTYPE указать ссылку на него чтобы он проверял валидность
    Можно игнорить кусок кода во внешенм DTD
    <![IGNORE[
    <!-- Comment -->
    <!ELEMENT TITLE ANY>
]]>



-->